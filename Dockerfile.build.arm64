## Build: docker build --no-cache -t hashivaultcs:dev-arm64 --file Dockerfile.build.arm64 .
## Once the image is built, get the list of avaiable images in the local docker registry: docker image ls
## Run the following command with corresponding the image id: docker run --name hashivaultcs-dev-arm64 -td <image-id />
## This will run an empty container (nothing will happen) - connect and retrieve the files from /app/runtime

FROM mcr.microsoft.com/dotnet/runtime:8.0-jammy-arm64v8 AS base-arm64
WORKDIR /app

FROM mcr.microsoft.com/dotnet/sdk:8.0-jammy-arm64v8 AS build-arm64
WORKDIR /src-arm64

COPY ["Client/Client.csproj", "Client/"]
RUN dotnet restore "Client/Client.csproj"
COPY . .

WORKDIR "/src-arm64/Client"
RUN dotnet build "Client.csproj" --os linux -a arm64 -c Release -o /app/build-arm64/bin/Release/net8.0/linux-arm64
RUN dotnet build "Client.csproj" --os win -a arm64 -c Release -o /app/build-arm64/bin/Release/net8.0/win-arm64

FROM build-arm64 AS publish-arm64
RUN dotnet publish "Client.csproj" --os linux -a arm64 -c Release -o /app/publish-arm64/bin/Release/net8.0/linux-arm64
RUN dotnet publish "Client.csproj" --os win -a arm64 -c Release -o /app/publish-arm64/bin/Release/net8.0/win-arm64

FROM base-arm64 AS final-arm64
WORKDIR /app
COPY --from=publish-arm64 /app/publish-arm64/bin/Release ./runtime/arm64/
